/* COMMON */
body{
  color: #333;
  font-size: 16px;
  font-weight: 400;
  line-height: 1.4;
  font-family: 'Nanum Gothic', sans-serif;
}

img {
  display: block;
}

a {
  /* link 밑줄 없애줌.  */
  text-decoration: none;
}
/* 모든 inner값이 여기에 적용 */
.inner{
  width: 1100px;
  /* 가운데 정렬 */
  margin: 0 auto; 
  /* position상에 부모값이 되게 정의 */
  position: relative;
}
/* .btn 은 클래스선택자 1개 - 10점
.btn.btn--reverse 클래스선택자 2개 - 20점
.btn.btn--reverse:hover 클래스선택자2개/가상클래스1개 hover - 30점 */
.btn{ 
  width: 130px;
  padding: 10px;
  border: 2px solid #333;
  border-radius: 4px;
  color: #333;
  font-size: 16px;  /*부모요소로 상속받을 수도 있으니 확실히 다시 명시 */
  font-weight: 700;
  cursor: pointer;
  text-align: center;
  box-sizing: border-box; /* padding + border 가 들어갔으므로 요소의 크기가 커지지 않게 */
  display: block; /* a태그나 span태그 내게 .btn을 부여했을때 정상적으로 버튼의 요소가 나올수있게 */
  transition: .4s;
}

.btn:hover {
  background-color: #333;
  color: #fff;
}

.btn.btn--reverse { /* .btn.btn 일치선택자 --상태선택자(반전된 상태일 때) */
  background-color: #333;
  color: #fff;
}

.btn.btn--reverse:hover {
  background-color: transparent;
  color: #333;  
}

.btn.btn--brown {
  color: #592B18;
  border-color: #592B18;
}

.btn.btn--brown:hover {
  color: #fff;
  background-color: #592B18;
}

.btn.btn--gold {
  color: #D9AA8A;
  border-color: #D9AA8A;
}

.btn.btn--gold:hover {
  color: #fff;
  background-color: #D9AA8A ;
}

.btn.btn--white {
  color: #fff;
  border-color: #fff;
}

.btn.btn--white:hover {
  color: #333;
  background-color: #fff;
}

/* 나타났다 사라졌다 기능 */
.back-to-position {
  opacity: 0;
  transition: 1s;
}
.back-to-position.to-right { /* 왼쪽으로 이동된 상태 > 안보임 */
  transform: translateX(-150px);
}
.back-to-position.to-left { /* 오른쪽으로 이동된 상태 > 안보임 */
  transform: translateX(150px);
}
.show .back-to-position {
  opacity: 1;
  transform: translateX(0);
}
.show .back-to-position.delay-0 {
  transition-delay: 0;
}
.show .back-to-position.delay-1 {
  transition-delay: .3s;
}
.show .back-to-position.delay-2 {
  transition-delay: .6s;
}
.show .back-to-position.delay-3 {
  transition-delay: .9s;
}

/* HEADER */
header{
  width: 100%;
  /* position: relative; */
  background-color: #f6f5f0;
  border-bottom: 1px solid #c8c8c8;  
  position: fixed;
  top: 0;
  z-index: 9;
}
/* header의 자식인 inner만 여기에 적용됨. */
header > .inner{    
  height: 120px;  
}
header .logo{
  height: 75px;
  position: absolute; /* 전체화면 아닌 header 영역에 수식 중앙에 위치하도록 */
  top: 0;
  bottom: 0;
  left: 0;
  margin: auto;
  /* top에 0 지점과  bottom에 0 지점을 찾아 그 중앙을 auto로 자동으로 찾아줌. =수직 중앙 정렬 
  그러나 조건이 있는데 height값을 알려줘야함  */
  
}
header .sub-menu{  
  font-family: Arial, sans-serif;
  position: absolute;
  top: 10px;
  right: 0;
  display: flex;  
}
/* 그냥 ul.menu라고 하면 다른 클라스에 속한 ul.menu들도 다 이 속성이 먹게됨. 
후손 선택자: sub-menu ul.menu 같이 띄어쓰기로 구분*/
header .sub-menu ul.menu{
  display: flex;  
}

header .sub-menu ul.menu li{
  position: relative;  
}
/* :: 는 가상 요소 선택자 before 는 inline 요소임. */
header .sub-menu ul.menu li::before {
  content: "";
  /* display: block; */
  width: 1px;
  height: 12px;
  background-color: #e5e5e5;
  /* 요소를 block 성질로 바꿔줌. 위의 display: block은 삭제해도 무방.
  구조적인 부모요소의 display: relative; 넣어주기. 바로 위 li 태그*/
  position: absolute;
  top: 0;
  bottom: 0;
  margin: auto;
}
/* sign-in 앞 부분의 구분선을 안보이게. */
header .sub-menu ul.menu li:first-child:before {
  display: none;
}

header .sub-menu ul.menu li a{   
  font-size: 12px;
  /* 클릭을 편한게 할 수 있게 글씨보다 영역을 크게 해줌.  */
  padding: 11px 16px;
  /* 글씨 inline요소를 블록으로 성질 바꿔줌. 그러면 padding / margin 값을 줄 수 있음. block으로 바꾸면 a영역이 가로는 최대한의 값으로 잡으므로 전체가 menu부분이 흰색으로 바뀜.*/
  display: block;  
  color: #656565;
}

header .sub-menu ul.menu li a:hover {
  color: #000;
}

header .sub-menu .search{
  
  height: 34px; 
  position: relative;
}
header .sub-menu .search input{
  width: 36px;
  height: 34px;
  padding: 4px 10px;
  border: 1px solid #ccc;
  box-sizing: border-box;
  border-radius: 5px;
  outline: none;
  background-color: #fff;
  color: #777;
  font-size: 12px;
  transition: width .4s;
}

header .sub-menu .search input:focus {
  width: 190px;
  border-color: #669900;
  
}
header .sub-menu .search .material-icons {
  height: 24px;
  position: absolute;
  top: 0;
  bottom: 0;
  right: 5px;
  margin: auto 0;
  transition: .4s;
}

header .sub-menu .search.focused .material-icons {
  opacity: 0;
}

header .main-menu {  
  position: absolute;
  display: flex;
  bottom: 0;
  right: 0;
  z-index: 1;
}

header .main-menu .item .item__name {
  padding: 10px 20px 34px 20px;
  font-family: Arial, sans-serif;
  font-size: 13px;
}

/* hover는 item 에 적용이 되어야 item__name 과 item__contents에 동시 적용이 된다. */
header .main-menu .item:hover .item__name {
  background-color: #2c2a29;
  color: #669900;
  border-radius: 6px 6px 0 0;
}

header .main-menu .item .item__contents {
  width: 100%;
  position: fixed;
  left: 0;
  display: none;
}

header .main-menu .item:hover .item__contents {
  display: block;
}

header .main-menu .item .item__contents .contents__menu {
  background-color: #2c2a29;  
}
/* .contents__menu ul 이라고 작성하면 하위선택자가 됨. 그러면 contents안의 모든 ul 에 이 속성이 먹게 됨. 그래서 > 필요 */
header .main-menu .item .item__contents .contents__menu > ul {
  display: flex;
  padding: 20px 0;
}

header .main-menu .item .item__contents .contents__menu > ul > li{
  width: 220px;
}

header .main-menu .item .item__contents .contents__menu > ul > li h4{
  padding: 3px 0 12px 0;
  font-size: 14px;
  color: #fff;
}

header .main-menu .item .item__contents .contents__menu > ul > li ul li{
  padding: 5px 0;
  font-size: 12px;
  color: #999;
  cursor: pointer;
}

header .main-menu .item .item__contents .contents__menu > ul > li ul li:hover{
  color: #669900;
}

header .main-menu .item .item__contents .contents__texture {
  padding: 26px 0;  
  font-size: 12px;
  background-image: url("../images/main_menu_pattern.jpg");
}

header .main-menu .item .item__contents .contents__texture h4 {  
  font-weight: 700;  
  color: #999;  
  
}

header .main-menu .item .item__contents .contents__texture p {
  color: #669900;
  margin: 4px 0 14px;  
}

header .badges {
  position: absolute;
  top: 132px;
  right: 12px;  
}

header .badges .badge {
  border-radius: 10px;
  /* border-radius로 둥글게 깍아도 이미지 자체가 깍이는건 아니므로 이미지가 보더밖으로 넘치면 hidden하는 기능 추가. */
  overflow: hidden;
  margin-bottom: 12px;
  box-shadow: 4px 4px 10px rgba(0,0,0, .15);
  cursor: pointer;
}





/* <!-- FOOTER --> */
footer {
  background-color: #272727;
  border-top: 1px ridge #333;
}
footer .inner {  
  padding: 40px 0 60px 0; 
}
footer .menu {
  display: flex;
  justify-content: center;  
}
footer .menu li {
  position: relative;
}
footer .menu li::before { /* before 는 inline요소임 */
  content: ""; /* before에 들어갈 내용을 넣는거임. */
  width: 3px;
  height: 3px;
  background-color:#555;
  position: absolute; /* 또는 position: fixed 는 display 가 자동으로 block으로 바뀜. */
  top: 0;
  bottom: 0;
  margin: auto; /* 중앙 위치 */
  right: -1px;  
}
footer .menu li:last-child::before {
  display: none; /* 마지막은 점을 없애줌 */
}
footer .menu li a {
  color: #ccc;
  font-size: 12px;
  font-weight: 700;
  padding: 15px; /* font는 margin/padding의 위/아래값 사용 x => display: inline에서 block 으로 변경 필요*/
  display: block;
}

footer .menu li a.green {
  color: #669900;
}

footer .btn-group {
  margin-top: 20px;
  display: flex;
  justify-content: center;
  
}
footer .btn-group .btn {
  font-size: 12px;
  margin-right: 10px;
}
footer .btn-group .btn:last-child {
  margin-right: 0;
}
footer .info {
  margin-top: 30px;
  text-align: center;
}
footer .info span {
  color: #999;
  font-size: 12px;
  padding-right: 20px;
}
footer .info span:last-child {
  padding-right: 0;
}
footer .copyright {
  font-size: 12px;
  color: #999;
  text-align: center;
  margin-top: 12px;
}
footer .logo {
  margin: 30px auto 0; /* top left.right bottom     auto일 경우 조건: 가로너비 필요. img는 자체에 가로너비 있으므로 괜찮음  */
  left: 100px;
  display: block;  
}

